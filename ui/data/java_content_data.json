[
  {
    "id": "1",
    "data": "<div class='entry-content'><p>Here we discuss basic concepts surrounding Java, they are terms and principles that surround java as a language.</p><h2><strong>JDK vs JRE</strong></h2><p><strong>JRE</strong> &#8211; Java Runtime Environment &#8211; environment to enable java applications to run.</p><p><strong>JDK</strong> &#8211; Java Development Toolkit &#8211; everything need to develop a java application, which in turns includes a runtime environment (JRE)</p><p><strong>JVM</strong> &#8211; Java Virtual Machine, is an abstract concept of the machine, it is required to run java applications. JRE is the actual implementation of the JVM with libraries etc.</p><h2><strong>Stack vs Heap</strong></h2><p><strong>Heap </strong>&#8211; objects created globally for the application resides in the heap. References are pointed inside the heap. <em>Strings are created here in the heap.</em></p><p><strong>Stack </strong>&#8211; are for short lived memory allocation, for example, variables created in a loop, or in a method that are no longer accessible once the method/loop ends.</p><p>(not my image)<img class='alignnone size-full wp-image-365' src='http://sysdotoutdotprint.com/wp-content/uploads/2017/08/ss1.png' alt='' width='807' height='591' /></p><h2><strong>Just In Time Compiler</strong></h2><p>Java uses JIT Compiler or Just In Time Compiler, which runs after the program has started. Traditionally for an EXE file, it gathers all the necessary things before executing the application. In Contrast, Java has dynamic access to runtime information.</p><p>https://en.wikipedia.org/wiki/Just-in-time_compilation:</p><blockquote><p> The JIT compiler reads the bytecodes in many sections (or in full, rarely) and compiles them dynamically into machine language so the program can run faster. This can be done per-file, per-function or even on any arbitrary code fragment; the code can be compiled when it is about to be executed (hence the name &#8220;just-in-time&#8221;), and then cached and reused later without needing to be recompiled.</p></blockquote><p>&nbsp;</p></div>"
  },
  {
    "id": "2",
    "data": "<p>Typical problem scenario:</p> <ul> <li>For every opening brace (i.e., <code>(</code>, <code>{</code>, or <code>[</code>), there is a matching closing brace (i.e., <code>)</code>, <code>}</code>, or <code>]</code>) of the same type (i.e., <code>(</code> matches <code>)</code>, <code>{</code> matches <code>}</code>, and <code>[</code> matches <code>]</code>). An opening brace must appear before (to the left of) its matching closing brace. For example, <code>]{}[</code> is <em>not balanced</em>.</li> <li>No unmatched braces lie between some pair of matched braces. For example, <code>({[]})</code> is <em>balanced</em>, but <code>{[}]</code> and <code>[{)]</code> are <em>not balanced</em>.</li> </ul> <p>Algorithm used:</p> <p><img class='alignnone size-full wp-image-182' src='http://sysdotoutdotprint.com/wp-content/uploads/2017/03/algobalanced.jpg' alt='' width='1140' height='792' /></p> <p><strong>Possible implementation: </strong><img class='alignnone size-full wp-image-189' src='http://sysdotoutdotprint.com/wp-content/uploads/2017/03/Capture.png' alt='' width='662' height='623' /></p> </div>"
  },
  {
    "id": "3",
    "data": " <div class='entry-content'> <p><strong>Purpose</strong>: Comparable/Comparator are used to allow comparison of two or more objects. For example you have Person object and you want to add a natural ordering of each person by age. In other words to keep the order of each person from youngest to oldest or vice versa in a ordered collection like <a href='https://docs.oracle.com/javase/7/docs/api/java/util/TreeSet.html'>TreeSet</a> (There are other ordered collections for maps, list, sets as well)</p> <p><em>If you read the documentation on TreeSet it says it is using natural ordering. For primitive data types like String, integer, there is already a default natural ordering, (for numbers/integers it is ascending for String it using <a href='https://en.wikipedia.org/wiki/Lexicographical_order'>lexicographically ordering </a> (Dictionary ordering)), but you need to manually specify natural ordering for specific objects that you create, ie Person object:</em></p> <pre>public class Person{ private Integer age; //setters and getters }</pre> <h3><strong>Comparable</strong></h3> <ul> <li>Enables you to <strong>implement</strong> an <strong>interface</strong> from any of your class, forcing you to override the method <strong>compareTo()</strong> to enable you to compare this object to<strong> </strong>another instance of the object</li> <li>Comparable can be invoked with generic type invocation, for the case below we used <strong>Comparable</strong><em><strong>&lt;Person&gt;,</strong> </em>so that <em>compareTo()</em> method accepts Person as an parameter, otherwise it will accept object and you will have to typecast it to Person object.</li> <li>compareTo() method returns an int, so that: <ul> <li>if you return a negative integer = this Person object is less than the other Person</li> <li>if you return 0 = this person is equal to the other person</li> <li>if you return positive integer = this person is greater than the other person</li> <li>so if you are ordering by age</li> </ul> </li> </ul> <pre>public int compareTo(Person otherPerson){ if(this.age &gt; otherPerson.getAge()){ return 1; }else if(this.age == otherPerson.getAge()){ return 0; } else{ return -1; } }</pre> <p><strong>Example</strong>: (for simplicities sake, i&#8217;ve used Integer as data type and compared it using Integer&#8217;s compareTo method)</p> <pre>public class Person implements Comparable&lt;Person&gt;{ private Integer age; public int compareTo(Person otherPerson){ return this.age.compareTo(otherPerson.getAge()); } }</pre> <ul> <li>Once you have implemented Comparable, any object you add to any collection type that maintains natural ordering (<em>TreeSet, SortedSet, TreeMap</em>) will have automatically sorted your objects.</li> </ul> <h3><strong>Comparator</strong></h3> <ul> <li>Comparator uses a seperate <strong>class</strong> that enables you to compare two objects at a time.</li> <li>It has a method called <strong>compare(object o1, object </strong><strong>o2)</strong>, that enables you to compare two objects and returns int as well similar to comparable.</li> <li>Similar to the example above, we are sorting by age but notice that we had to create a new class called <strong>PersonComparator </strong>and then <strong>extend </strong>the class Comparator with the generic type invocation of Person.</li> <li>Comparator returns integer whereas, same as comparable: <ul> <li>if you return a negative integer = this Person object is less than the other Person</li> <li>if you return 0 = this person is equal to the other person</li> <li>if you return positive integer = this person is greater than the other person</li> </ul> </li> </ul> <p><strong>Example:</strong></p> <pre>public class PersonComparator implements Comparator&lt;Person&gt;{ public int compare(Person p1, Person p2){ return p1.getAge().compareTo(p2.getAge()); } }</pre> <p><strong>To use:</strong></p> <p>you would need to use a collection that can accept a comparator as a parameter, for examples sake I am using <a href='https://docs.oracle.com/javase/7/docs/api/java/util/LinkedList.html'>LinkedList </a></p> <pre>LinkedList&lt;Person&gt; personList = new LinkedList&lt;Person&gt;(); Person person1 = new Person(); person1.setAge(15); Person person2 = new Person(); person2.setAge(20); personList.add(person1); personList.add(person2);<strong>Collections.sort(personList, new PersonComparator());</strong></pre> <p>There other collections that accepts comparator as a constructor parameter, for example TreeSet:</p> <pre><strong>TreeSet&lt;Person&gt; personSet = </strong> <strong> new TreeSet&lt;Person&gt;(new PersonComparator());</strong></pre> <p><strong>Conclusion</strong></p> <p>Although both comparable and comparator provide same functionality it is more of a design <strong>whether you want to be implementing a interface or creating a new class.</strong></p> <p><strong> This can also be a matter of access to the class</strong>, if you are using a third party API, and you don&#8217;t have access to the Person object, then you are forced to use comparator instead.</p> <p>Also, a <strong>major hindrance</strong> for <strong>comparable</strong> is it is only limited to one implementation only, if you wanted to add more implementation for example, sort Person object by telephone number you can no longer use comparable, instead use <strong>comparator</strong> to create different implementations of different sortings.</p> <p><strong>Offical documentation: </strong></p> <ul> <li>https://docs.oracle.com/javase/7/docs/api/java/lang/Comparable.html</li> <li>https://docs.oracle.com/javase/7/docs/api/java/util/Comparator.html</li> </ul> </div>"
  },
  {
    "id": "4",
    "data": "<div class='entry-content'> <p>Basic Question in Java is usually what is the difference between Set/List/Map.</p> <p><strong>Set &#8211;</strong> is used usually used when you want to keep a collection of items that have no duplicates. Plain and simple. So think set when you want a unique collection of items.</p> <ul> <li>Variations <ul> <li>TreeSet (interface: SortedSet) &#8211; sorts the value in the set by natural ordering or comparator</li> <li>HashSet &#8211; no ordering, puts objects in different buckets based on their hash, faster than treeset</li> </ul> </li> </ul> <p><strong>List &#8211; </strong>is used with regards to just keeping a sequence of objects, it does not care about duplicates the primary focus of sequence and iteration</p> <ul> <li>Variations <ul> <li>ArrayList &#8211; basic list of items, random access, thread-safe</li> <li>Vector &#8211; non thread safe version of Arraylist</li> <li>Linked List &#8211; items are doubly linked to each other</li> </ul> </li> </ul> <p><strong>Map </strong><strong>&#8211; </strong>on the other hand has a key-value collection, you assign a key to a particular object, say you have 2 dog objects, you can assign different keys for each dog objects, like: <em>Brownie</em> and <em>Blackie</em>. So if you fetch from the collection <em>Blackie</em>, it will return that specific object associated to that key.</p> <ul> <li>Variations <ul> <li>TreeMap (interface SortedMap) &#8211; ordered version of map</li> <li>HashMap &#8211; no ordering of map, different buckets per object based on hash</li> <li>LinkedHashMap &#8211; doubly linked objects version of map</li> </ul> </li> </ul> <p>&nbsp;</p> </div>"
  },
  {
    "id": "5",
    "data": " <div class='entry-content'> <p>Static vs Instance variables</p> <p>When you declare a variable static, there is only one copy of that variable per class. Consider the following example (bad encapsulation code do not copy):</p> <p><img class='alignnone size-full wp-image-373' src='http://sysdotoutdotprint.com/wp-content/uploads/2017/08/ss.png' alt='' width='547' height='446' /></p> <p>when we use static, there is only one copy per class, so no matter how many Humans objects we have, there is only one PLANET, notice we only changed planet for human 1 but the changes reflected to human 2 when we printed out the h2.PLANET.</p> <p>In contrast to Instance variables, they are unique per instance of the class, h1 has a different home compared h2.</p> <p>General Rules:</p> <ul> <li> A static variable is initialized when the JVM loads the class</li> <li>A <code>static method</code> <strong>cannot</strong> access <code>Non-static</code> variable or method</li> </ul> </div>"
  },
  {
    "id": "6",
    "data": "<div class='entry-content'> <p>There are instances where you would want to check memory allocation for your application in cases where your application sometimes randomly crashes. This is usually due to memory leaks in the application.</p> <p>Once you install JDK in your machine it comes with visualvm. It is just a matter connecting to it.</p> <p>Steps:</p> <p>1.) Make sure application server is running</p> <p>2.) go to visualvm:<img class='alignnone size-full wp-image-357' src='http://sysdotoutdotprint.com/wp-content/uploads/2017/08/ss2.png' alt='' width='744' height='510' /></p> <p>3.) You will see a pop-up window, under remote, key-in: localhost:8080 (or whatever port you are in)</p> <p>4.) Successfully logged in you will see, on the upper right you can perform a heap dump (current state of memory allocation and you will see which class are taking the most memory). On this dashboard you can monitor how the application is handling memory, threads, and Garbage Collection.</p> <p><img class='alignnone size-full wp-image-356' src='http://sysdotoutdotprint.com/wp-content/uploads/2017/08/ss3.png' alt='' width='1913' height='960' /></p> <p>4.) Once you click heap dump you will be redirected to this page, at which point you can find the biggest objects in your application:</p> <p><img class='alignnone size-full wp-image-361' src='http://sysdotoutdotprint.com/wp-content/uploads/2017/08/ss4.png' alt='' width='1712' height='795' /></p> <p>5.) you can also see in the classes tab which specific classes are eating up the memory</p> <p><img class='alignnone size-full wp-image-362' src='http://sysdotoutdotprint.com/wp-content/uploads/2017/08/ss5.png' alt='' width='1643' height='815' /></p> <p>&nbsp;</p> </div>"
  },
  {
    "id": "7",
    "data": "<div class='entry-content'> <p><strong>Identifiers</strong></p> <ul> <li>identifiers begin with letter, underscore or currency</li> <li>After the first letters, identifiers can contain digits</li> <li>can be any length</li> <li>must be camelCase methods <ul> <li>Example of all valid identifier</li> </ul> </li> </ul> <pre>String b, _hello, $holder, number5, reallyreallyreallyreallylongName;</pre> <p><strong>Declaration Rules</strong></p> <ul> <li>source code file can only have one public class</li> <li>file name must match class name</li> <li>one package statement, with multiple imports <ul> <li>package must be first line</li> <li>import must come after</li> </ul> </li> <li>file can have more than one non public class</li> </ul> <p><strong>Class Access Modifiers</strong></p> <ul> <li>four access levels <ul> <li>public</li> <li>protected</li> <li>private</li> <li>default</li> </ul> </li> <li>Classes: public and default</li> <li>Class visibility revolves around whether another class can: <ul> <li>Create ans instance of another class</li> <li>extend another class</li> <li>access methods and variables of another class</li> </ul> </li> </ul> <p><strong>Non Access Class Modifiers</strong></p> <ul> <li>non access modifiers: final, abstract, or strictfp</li> <li>class cannot be both final and abstract &#8211; contradicting</li> <li>final class cannot be subclassed</li> <li>abstract cannot be instantiated</li> <li>single abstract method means the whole class must be abstract</li> <li>abstract class can have both concrete and abstract class</li> <li>first concrete class to extend abstract must implement all of its abstract methods</li> </ul> <p><strong>Interface</strong></p> <ul> <li>Interface are contracts for what a class can do</li> <li>interfaces are implemented by class</li> <li>interface can only have abstract methods</li> <li>interface methods are default public and default</li> <li>interface can have constants but they are implicity <em>public static and final</em></li> <li>A legal nonabstract implementing class has the following properties: <ul> <li> It provides concrete implementations for the interface&#8217;s methods.</li> <li> It must follow all legal override rules for the methods it implements.</li> <li> It must not declare any new checked exceptions for an implementation method.</li> <li> It must not declare any checked exceptions that are broader than the exceptions declared in the interface method.</li> <li>It may declare runtime exceptions on any interface method implementation regardless of the interface declaration.</li> <li>It must maintain the exact signature (allowing for covariant returns) and return type of the methods it implements (but does not have to declare the exceptions of the interface).</li> <li>Interfaces cannot extend a class, or implement a class or interface</li> <li>Interfaces can extend one or more other interfaces</li> <li><em>A class can extend only one class (no multiple inheritance), but it can implement many interfaces.</em></li> </ul> </li> </ul> <p>&nbsp;</p> <p>&nbsp;</p> </div>"
  },
  {
    "id": "8",
    "data": "<div class='entry-content'> <p><strong>Lambda functions &#8211; </strong>enables you to treat functionality as method arguments.</p> <ul> <li>The <em>forEach()</em> method for handling a collection of data. In this case, we have a list of Person, instead of doing a for loop we are using lambda syntax:</li> </ul> <blockquote><p><img class='alignnone size-full wp-image-244' src='http://sysdotoutdotprint.com/wp-content/uploads/2017/04/ss.png' alt='' width='488' height='268' /></p></blockquote> <p>For more complex methods you can wrap it in brackets, acting as anonymous classes.</p> <p><img class='alignnone size-full wp-image-246' src='http://sysdotoutdotprint.com/wp-content/uploads/2017/04/ss-1.png' alt='' width='568' height='173' /></p> <p>Lambda expressions can also be used to easily overwrite <strong>SAM</strong> interfaces, or Single Abstract Method interface. These are interfaces that have one sole method that the developer needs to overwrite. Example are <a href='https://docs.oracle.com/javase/7/docs/api/java/lang/Runnable.html'><em>Runnable</em> </a>and <a href='https://docs.oracle.com/javase/7/docs/api/java/util/Comparator.html'><em>Comparator</em> </a>interface.</p> <p>Instead of creating classes to overwrite theses interface, these can be easily handle by lambda expressions, the below will sort person by name:</p> <p><img class='alignnone size-full wp-image-247' src='http://sysdotoutdotprint.com/wp-content/uploads/2017/04/ss-2.png' alt='' width='730' height='83' /></p> <ul> <li>Similar to inner classes, lambda have access to it&#8217;s class variables</li> </ul> <p><img class='alignnone size-full wp-image-248' src='http://sysdotoutdotprint.com/wp-content/uploads/2017/04/ss-3.png' alt='' width='562' height='84' /></p> <p>Static Method references using lambda</p> <p><strong>Note</strong>: in this case my class name is <strong>Program</strong>, and I have a static method called <em><strong>processPeople</strong>(),</em> so looking at the below, for each person in my list, call the method <em><strong>processPeople</strong>(), </em>which can be your method to do validation and then save to the database.</p> <p><img class='alignnone size-full wp-image-249' src='http://sysdotoutdotprint.com/wp-content/uploads/2017/04/ss-4.png' alt='' width='507' height='156' /></p> <p>Instance Method References using lambda,</p> <p>in this case, we have a separate <strong><em>PersonDAO</em> </strong>class that has a method called <em><strong>saveToDB</strong>(), </em>we needed to initialize the class and called it <em>handler, </em>from there now you can say <strong><em>forEach</em> </strong>person in my list, use <em>handler</em> to <em><strong>saveToDB</strong>. </em>it is much simpler rather than using for loops or iterators to go through each value in your list.</p> <p><img class='alignnone size-full wp-image-250' src='http://sysdotoutdotprint.com/wp-content/uploads/2017/04/ss-5.png' alt='' width='412' height='182' /></p> <p>&nbsp;</p> </div>"
  },
  {
    "id": "9",
    "data": " <div class='entry-content'> <p>There are several changes for interfaces, including the addition of <strong>static</strong> and <strong>default</strong> methods. Interfaces in java 8 is more and more similar to abstract method. Consider the example below:</p> <p><img class='alignnone size-full wp-image-256' src='http://sysdotoutdotprint.com/wp-content/uploads/2017/04/ss-6.png' alt='' width='470' height='284' /></p> <p>Key notes:</p> <p><strong>static</strong></p> <ul> <li>static methods inside interfaces are only accessible inside the interface.</li> <li>No way to access from outside the interface, see <span style='text-decoration: underline;'><em>initializeTestData()</em></span><em> </em>method above.</li> </ul> <p><strong>default</strong></p> <ul> <li>default are concrete methods for interfaces, that can be or not overwritten</li> <li>this enables you to give default behaviour of interfaces without having to implement them, for example in this case, <em>testable</em> has a default behaviour of printing out some text.</li> <li><em>you can&#8217;t have multiple interfaces with same method that is implemented by one class see the below:</em></li> <li>both <em>Testable, Untestable have the same method test(), resulting in a compiler error</em></li> </ul> <p><em><img class='alignnone size-full wp-image-259' src='http://sysdotoutdotprint.com/wp-content/uploads/2017/04/ss-7.png' alt='' width='461' height='387' /></em></p> <p><strong>the code above will require you to provide a test method in your class.</strong></p> <h2>Lambda and Functional Interfaces</h2> <p>There is a new of interaction for lambda and interfaces. First of, what are <strong><span style='text-decoration: underline;'><em>functional interfaces</em></span></strong>? These are interfaces that only have one sole method. A great example of this is the interface <em>Runnable, </em>when you want to run threads. Another interface well known is <em><a href='http://sysdotoutdotprint.com/index.php/2017/03/28/comparable-vs-comparator/'>Comparable</a>, </em>for when you want to compare objects.</p> <p>Now with lambda you can instantiate functional interfaces instantly, consider the below:</p> <p><img class='alignnone size-full wp-image-260' src='http://sysdotoutdotprint.com/wp-content/uploads/2017/04/ss-8.png' alt='' width='547' height='259' /></p> <p><strong>Key Notes:</strong></p> <ul> <li>Notice the syntax for <em><span style='text-decoration: underline;'>R</span><span style='text-decoration: underline;'>unnable</span></em>, whatever we pass inside the curly brackets, will automatically be the implementation of the single method in the interface.</li> <li>You can create your own functional interface, and have parameters as well, see syntax for <em><span style='text-decoration: underline;'>Bounceable</span></em></li> <li>Functional interfaces cannot have more than one method, otherwise lambda expressions will not know which method to use</li> <li>There is a new package in java that is solely containing functional interfaces for lambda expressions, will look into that in the next post.</li> </ul> <p>&nbsp;</p> </div>"
  },
  {
    "id": "10",
    "data": "<div class='entry-content'> <p>As in previous topic, we can use functional interfaces to use in lambda expression see topic on: <a href='http://sysdotoutdotprint.com/index.php/2017/04/22/java-8-interface/'>Java 8 interfaces</a></p> <p>However Java 8 goes on more to provide us mechanism to easier create lambda expressions. See <a href='https://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html'>java.util.function library</a>. No need to create an functional interface and just overwrite existing ones in this library.</p> <p>This library can be divided in to four sections:</p> <h2><strong>Consumers</strong></h2> <p>Consumers are interfaces that focuses on accepting parameters. for example: <a href='https://docs.oracle.com/javase/8/docs/api/java/util/function/BiConsumer.html'>BiConsumer</a> &#8211; as the api reads, this accepts two arguments and produces no result:</p> <p><img class='alignnone size-full wp-image-269' src='http://sysdotoutdotprint.com/wp-content/uploads/2017/04/ss-9.png' alt='' width='602' height='177' /></p> <p>The same logic applies to all the *<strong>Consumer</strong> in the library like <a title='interface in java.util.function' href='https://docs.oracle.com/javase/8/docs/api/java/util/function/DoubleConsumer.html'>DoubleConsumer</a>, <a href='https://docs.oracle.com/javase/8/docs/api/java/util/function/LongConsumer.html'>LongConsumer</a>, and so forth.</p> <h2><strong>Functions</strong></h2> <p>Functions are interfaces that are focused on doing accepting a parameter and returning a result. for example: <a href='https://docs.oracle.com/javase/8/docs/api/java/util/function/BiFunction.html'>BiFunction </a>&#8211; as the api reads, accepts two arguments and returns one result we can use it as below:</p> <p><img class='alignnone size-full wp-image-270' src='http://sysdotoutdotprint.com/wp-content/uploads/2017/04/ss-10.png' alt='' width='521' height='154' /></p> <p>The same logic applies to all the *<strong>Function</strong> in the library like <a title='interface in java.util.function' href='https://docs.oracle.com/javase/8/docs/api/java/util/function/DoubleToLongFunction.html'>DoubleToLongFunction</a>, <a title='interface in java.util.function' href='https://docs.oracle.com/javase/8/docs/api/java/util/function/LongToDoubleFunction.html'>LongToDoubleFunction</a>, and so forth.</p> <h2><strong>Supplier</strong></h2> <p>In contrast, <a href='https://docs.oracle.com/javase/8/docs/api/java/util/function/Supplier.html'>Supplier </a>methods just returns an object without an parameters:<img class='alignnone size-full wp-image-271' src='http://sysdotoutdotprint.com/wp-content/uploads/2017/04/ss-11.png' alt='' width='508' height='94' /></p> <p>This applies to all *<strong>Supplier</strong> methods, like <a href='https://docs.oracle.com/javase/8/docs/api/java/util/function/IntSupplier.html'>IntSupplier</a>, <a href='https://docs.oracle.com/javase/8/docs/api/java/util/function/BooleanSupplier.html'>BooleanSupplier</a>, and so forth.</p> <h2><strong>Operator</strong></h2> <p>Finally we have <a href='https://docs.oracle.com/javase/8/docs/api/java/util/function/UnaryOperator.html'>UnaryOperator </a>methods in the library, it is much similar to consumer, but in a way it just accepts an object and returns that same type.</p> <p>The best way to use UnaryOperators are for when using objects you have created, see example below.</p> <p>In this case I have created a People class, and the output will also be the same class:</p> <p><img class='alignnone size-full wp-image-272' src='http://sysdotoutdotprint.com/wp-content/uploads/2017/04/ss-12.png' alt='' width='491' height='482' /></p> <p>Same applies to other *<strong>Operators</strong> method in the library however the others have a predefined data type. for example <a href='https://docs.oracle.com/javase/8/docs/api/java/util/function/DoubleUnaryOperator.html'>DoubleUnaryOperator</a>, <a href='https://docs.oracle.com/javase/8/docs/api/java/util/function/IntUnaryOperator.html'>IntUnaryOperator</a>, and so forth.</p> </div>"
  },
  {
    "id": "11",
    "data": " <div class='entry-content'> <p><strong>Java 8 Streams</strong></p> <p>Streams provide another layer of abstraction on our collections of data that enable you to perform complex sets of actions on. The most powerful use of streams are chaining commands. For example, no longer do you need to perform a for loop to iterate over a collection of String. Stream supports aggregate operations like filter, map, limit, reduce, find, match, and so on.</p> <h3><strong>Filter</strong></h3> <p>Filter is mainly used to eliminate elements based on a criteria, the parameter it takes comes in the form of a <a href='https://docs.oracle.com/javase/8/docs/api/java/util/function/Predicate.html'>Predicate</a> (takes in one parameter, returns boolean). Below we have a list of String and we only to print out those starting with &#8216;Good&#8217;, so below we chained to methods, <em>filter</em>(), and .<em>forEach</em>()<img class='alignnone size-full wp-image-292' src='http://sysdotoutdotprint.com/wp-content/uploads/2017/05/ss.png' alt='' width='719' height='85' /></p> <h3><strong>Collectors</strong></h3> <p>In the previous example, we just passed the stream result to another function forEach to print out whatever was the result of the <em>filter</em> command. What do we do if we want to return a mutable list of what we have filtered? Collectors are exactly for that.</p> <p>Continuing on the previous example, after we filtered, we can now return another list of Strings in <em>filteredData</em> object:</p> <p><img class='alignnone size-full wp-image-296' src='http://sysdotoutdotprint.com/wp-content/uploads/2017/05/ss2.png' alt='' width='712' height='62' /></p> <p>There are other powerful methods that Collectors can do, but we won&#8217;t dive in too much detail for that. For Example, you can comma-separate your results, pass them to another method, or even map them to maps. For more details check out this documentation: <a href='https://docs.oracle.com/javase/8/docs/api/index.html?java/util/stream/Collector.html'>Collectors</a>.</p> <h3><strong>Limit</strong></h3> <p>Limit is quite straight-forward, it just limits the number of elements inside your stream. This method takes one parameter, just a long object that specifies the actual limit.</p> <h3><strong>Sorted</strong></h3> <p>Sorted is also quite straight-forward, it sorts the elements inside the stream. There are two possible implementation, no parameters, which assumes that object used in inside your stream have their own comparable implementation. The other takes a comparator parameter, with your implementation, here is both limit and sort in action:</p> <p><img class='alignnone size-full wp-image-297' src='http://sysdotoutdotprint.com/wp-content/uploads/2017/05/ss3.png' alt='' width='333' height='49' /></p> <h3><strong>Map</strong></h3> <p>Map enables us to perform an operation on each individual element in the stream. Gone are the days for multiple for-loops when you start using lambdas. Check out this single line below which is based on the previous examples:</p> <p><img class='alignnone size-full wp-image-298' src='http://sysdotoutdotprint.com/wp-content/uploads/2017/05/ss4.png' alt='' width='658' height='22' /></p> <p>The example, will append my name on all the greeting, so it will be &#8220;Hello Mel&#8221;, &#8220;Bye Mel&#8221;, and so on. <strong>All this in just one line of code!</strong></p> </div>"
  },
  {
    "id": "12",
    "data": " <div class='entry-content'> <p>Hibernate Class:</p> <pre>@Entity @Table(name='Person') public class Person{ @OneToMany(mappedBy = 'children', cascade = CascadeType.ALL, orphanRemoval = true) private Set&lt;Child&gt; children; ... //setters and getters }</pre> <p>&nbsp;</p> <p>Error occurs when in controller you are trying to set it to null instead of clearing the set/list, the following pseudo code will throw an exception as “A collection with cascade=”all-delete-orphan” was no longer referenced by the owning entity instance”</p> <pre>public String deleteChildren(HttpServletRequest request, @ModelAttribute('person') Person person, BindingResult result, Model model) { person.setChildren(null); repository.save(person); }</pre> <p>instead use:</p> <pre>person.getChildren.clear(); repository.save(person);</pre> </div>"
  },
  {
    "id": "13",
    "data": "<div class='entry-content'> <p>How to Map Enum to hibernate class:</p> <pre>@Entity @table('d_user_group') public class UserGroup <br/>  <br/> { @Enumerated(EnumType.STRING) @Column(name='user_group_status') private UserGroupStatusEnum userGroupStatus;public enum UserGroupStatusEnum{ Active, Draft; } }</pre> <p>In the case above we have a table<em> d_user_group</em>, that will have a column <em>user_group_status</em>, that only accepts <em>Enum</em> as a parameter. If you specify <em>EnumType.String</em> it will store the actual words from your Enum:</p> <p class='fix-link-focus'><img class='alignnone size-full wp-image-29' src='https://sysdotoutdotprint.files.wordpress.com/2017/01/ss1.png?w=700' sizes='(max-width: 153px) 100vw, 153px' srcset='https://sysdotoutdotprint.files.wordpress.com/2017/01/ss1.png 153w, https://sysdotoutdotprint.files.wordpress.com/2017/01/ss1.png?w=150 150w' alt='ss1' data-attachment-id='29' data-permalink='https://sysdotoutdotprint.wordpress.com/2017/01/25/enumtype-ordinal-vs-enumtype-string/ss1/' data-orig-file='https://sysdotoutdotprint.files.wordpress.com/2017/01/ss1.png?w=700' data-orig-size='153,112' data-comments-opened='1' data-image-meta='{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}' data-image-title='ss1' data-image-description='' data-medium-file='https://sysdotoutdotprint.files.wordpress.com/2017/01/ss1.png?w=700?w=153' data-large-file='https://sysdotoutdotprint.files.wordpress.com/2017/01/ss1.png?w=700?w=153' /></p> <p>Selecting <em>EnumType.Ordinal</em> in contrast will store Integer based on ordering, so Active will be 0, Draft will be 1, and so on.</p> </div><!-- .entry-content -->"
  }
]